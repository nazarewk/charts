apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "vault.fullname" . }}
  labels:
    app: {{ template "vault.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
      maxSurge: {{ .Values.maxSurge }}
  template:
    metadata:
      labels:
        app: {{ template "vault.name" . }}
        release: {{ .Release.Name }}
        {{- range $key, $value := .Values.vault.labels }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end}}
      {{- if .Values.vault.annotations }}
      annotations:
        {{- range $key, $value := .Values.vault.annotations }}
        {{ $key | quote }}: {{ $value | quote }}
        {{- end}}
      {{- end}}
    spec:
      {{- if .Values.vault.podDNSAsClusterAddr }}
      initContainers:
      - name: init
        image: stedolan/jq
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - bash
        - -c
        - jq -Mc ".cluster_addr=\"http{{- if not .Values.vault.config.listener.tcp.tls_disable -}}s{{- end -}}://${POD_IP//./-}.${POD_NAMESPACE}.pod.cluster.local:{{ .Values.service.clusterPort }}\"" /vault/config/config.json > /root/config.json
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config/
        - name: vault-root
          mountPath: /root/
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.vault.dev }}
        command:
        - "vault"
        - "server"
        - "-log-level={{ .Values.vault.logLevel }}"
        - "-dev"
        - "-dev-listen-address"
        - "[::]:8200"
        {{- else }}
        command:
        - "vault"
        - "server"
        - "-log-level={{ .Values.vault.logLevel }}"
        {{- if .Values.vault.podDNSAsClusterAddr }}
        - "-config"
        - "/root/config.json"
        {{- else }}
        - "-config"
        - "/vault/config/config.json"
        {{- end }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.service.port }}
          name: api
        - containerPort: {{ .Values.service.clusterPort }}
          name: cluster
        livenessProbe:
          httpGet:
            path: /v1/sys/health?standbycode=200&sealedcode=200&uninitcode=200
            port: {{ .Values.service.port }}
            {{- if not .Values.vault.config.listener.tcp.tls_disable }}
            scheme: HTTPS
            {{- end }}
        readinessProbe:
          # Ready depends on preference
          httpGet:
            path: "/v1/sys/health?
            {{- range $key, $value := .Values.vault.readinessParams -}}
              {{ $key }}={{ $value }}&
            {{- end -}}"
            port: {{ .Values.service.port }}
            {{- if not .Values.vault.config.listener.tcp.tls_disable }}
            scheme: HTTPS
            {{- end }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            add:
            - IPC_LOCK
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config/
        - name: vault-root
          mountPath: /root/
        {{- range .Values.vault.customSecrets }}
        - name: {{ .secretName }}
          mountPath: {{ .mountPath }}
        {{- end }}
        env:
{{ toYaml .Values.vault.env | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      {{- if .Values.affinity }}
      affinity:
{{ tpl .Values.affinity . | indent 8 }}
      {{- end }}
      volumes:
      - name: vault-config
        configMap:
          name: "{{ template "vault.fullname" . }}-config"
      - name: vault-root
        emptyDir: {}
      {{- range .Values.vault.customSecrets }}
      - name: {{ .secretName }}
        secret:
          secretName: {{ .secretName }}
      {{- end }}
